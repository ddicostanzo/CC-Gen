using System;
using System.Collections.Generic;
using System.Linq;
using VMS.TPS.Common.Model.API;
using static OSU_Helpers.Enumerables;
namespace OSU_Helpers
{
    /// <summary>
    /// An SRT Metrics class for calculating specific metrics such as CI, HI, GI and Selectivity
    /// </summary>
    public class SRT_Metrics
    {
        private List<Gradient_Data> _GradientData { get; set; } = new List<Gradient_Data>();
        /// <summary>
        /// The list of PTVs that are being passed for the calculation of the metrics
        /// </summary>
        public List<Structure> PTVs { get; set; }
        /// <summary>
        /// The number of PTVs used in the calculation of the metrics, not the same as the number of PTVs in the list
        /// </summary>
        public int NumberOfPTVs => (PTVs.Count > 6) ? 7 : PTVs.Count;
        /// <summary>
        /// Total volume of all structures in the list
        /// </summary>
        public double TotalPTVVolume => PTVs.TotalVolume();

        /// <summary>
        /// Constructor for use with the 20 and 50 fits that were generated by Will, Wes, and Mark A. Requires a structure list.
        /// </summary>
        /// <param name="ptv_list">A structure list, PTV List is preferable, is required to generate this class</param>
        public SRT_Metrics(List<Structure> ptv_list)
        {
            PTVs = ptv_list;

            System.IO.Stream stream20 = EmbeddedResource.EmbeddedStream("Gradient20Fits.txt");
            List<string[]> list20 = FileIOHelper.ReadDelimitedStream(stream20, ',');
            LoadGradientData(list20, Gradient.Gradient20);

            System.IO.Stream stream50 = EmbeddedResource.EmbeddedStream("Gradient50Fits.txt");
            List<string[]> list50 = FileIOHelper.ReadDelimitedStream(stream50, ',');
            LoadGradientData(list50, Gradient.Gradient50);
        }

        /// <summary>
        /// Generic constructor for use with user defined parameters, not currently operational.
        /// </summary>
        /// <param name="inputfilename"></param>
        /// <param name="delimiter"></param>
        /// <param name="ptv_list"></param>
        public SRT_Metrics(string inputfilename, char delimiter, List<Structure> ptv_list)
        {
            PTVs = ptv_list;
            List<string[]> file = FileIOHelper.ReadDelimitedFile(inputfilename, delimiter);
            LoadGradientData(file, Gradient.UserDefined);
        }

        private double CalculatedGradient(Gradient g)
        {
            return Math.Round((_GradientData.Where(a => a.NumberOfPTVs == NumberOfPTVs && a.GradientDesignation == g).First().PredictedGradientVolume(TotalPTVVolume)) / TotalPTVVolume, 2);
        }

        /// <summary>
        /// The calculated gradient for the 20% IDL from the fits.
        /// </summary>
        public double CalculatedGradient20 => CalculatedGradient(Gradient.Gradient20);

        /// <summary>
        /// The calculated gradient for the 50% IDL from the fits.
        /// </summary>
        public double CalculatedGradient50 =>  CalculatedGradient(Gradient.Gradient50);

        private double CalculateRing(Gradient g)
        {
            return Math.Round((_GradientData.Where(a => a.NumberOfPTVs == NumberOfPTVs && a.GradientDesignation == g).First().PredictedRingDistanceFromTarget(TotalPTVVolume)), 2);
        }

        /// <summary>
        /// The calculated ring for the 20% IDL from the fits.
        /// </summary>
        public double CalculatedRing20  => CalculateRing(Gradient.Gradient20);

        /// <summary>
        /// The calculated ring for the 50% IDL from the fits.
        /// </summary>
        public double CalculatedRing50  => CalculateRing(Gradient.Gradient50);

        private void LoadGradientData(List<string[]> list, Gradient gradient)
        {
            for (int i = 0; i < list.Count; i++)
            {
                _GradientData.Add(new Gradient_Data(list.ElementAt(i), gradient));
            }

        }
    }
}
